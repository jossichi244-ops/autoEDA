{
  "data_type_detection": {
    "time_series": {
      "criteria": ["datetime_index", "ordered_timestamps"],
      "enabled": true
    },
    "text": {
      "criteria": ["long_string_columns", "n_tokens_avg > 5"],
      "enabled": true
    },
    "numeric": {
      "criteria": ["float64", "int64"],
      "enabled": true
    },
    "categorical": {
      "criteria": ["object", "category"],
      "enabled": true
    }
  },
  "preprocessing": {
    "numeric": {
      "imputer": ["median", "mean", "knn"],
      "scaling": ["StandardScaler", "RobustScaler", "QuantileTransformer"],
      "outlier_handling": ["none", "winsorize", "clip"]
    },
    "categorical": {
      "imputer": ["most_frequent", "missing_category"],
      "encoding": ["OneHotEncoder", "TargetEncoder", "FrequencyEncoder"]
    },
    "text": {
      "cleaning": [
        "lowercase",
        "remove_stopwords",
        "lemmatization",
        "stemming"
      ],
      "vectorizers": ["TfidfVectorizer", "HashingVectorizer"],
      "embeddings": ["Word2Vec", "FastText", "BERT", "GPT_embeddings"],
      "topic_modeling": ["LDA", "BERTopic"]
    },
    "time_series": {
      "features": ["lag", "rolling_mean", "rolling_std", "exp_smoothing"],
      "decomposition": ["STL", "seasonal_decompose"],
      "frequency": ["daily", "weekly", "monthly"]
    },
    "target": {
      "imbalance": ["none", "smote", "adasyn", "class_weight"],
      "threshold": 0.2
    }
  },
  "feature_engineering": {
    "numeric": {
      "apply_if": "n_numeric >= 2",
      "strategies": [
        "interaction_terms",
        "polynomial_degree=2",
        "polynomial_degree=3"
      ]
    },
    "categorical": {
      "apply_if": "n_categorical >= 2",
      "strategies": ["cross_features"]
    },
    "text": {
      "apply_if": "avg_tokens > 5",
      "strategies": ["sentiment_analysis", "ner", "topic_modeling"]
    },
    "time_series": {
      "apply_if": "has_datetime_index",
      "strategies": ["lag_features", "rolling_stats", "trend", "seasonality"]
    }
  },
  "feature_selection": {
    "numeric": ["lasso", "variance_threshold", "pca"],
    "categorical": ["chi2", "mutual_info"],
    "text": ["tfidf_feature_importance", "embedding_dim_reduction"],
    "time_series": ["autocorrelation_selection", "feature_importance"]
  },

  "model_selection": {
    "problem_type": {
      "regression": [
        "LinearRegression",
        "Ridge",
        "Lasso",
        "ElasticNet",
        "RandomForestRegressor",
        "XGBRegressor",
        "LGBMRegressor",
        "SVR",
        "CatBoostRegressor"
      ],
      "classification": [
        "LogisticRegression",
        "SVC",
        "DecisionTreeClassifier",
        "RandomForestClassifier",
        "XGBClassifier",
        "LGBMClassifier",
        "CatBoostClassifier",
        "MLPClassifier",
        "KNeighborsClassifier",
        "NaiveBayes"
      ],
      "time_series": [
        "ARIMA",
        "SARIMA",
        "Prophet",
        "ExponentialSmoothing",
        "LSTM",
        "GRU",
        "TCN",
        "XGBRegressor (with lag features)"
      ],
      "clustering": [
        "KMeans",
        "MiniBatchKMeans",
        "DBSCAN",
        "GaussianMixture",
        "AgglomerativeClustering",
        "HDBSCAN",
        "SpectralClustering"
      ]
    },
    "ensemble_strategies": ["bagging", "boosting", "stacking", "voting"],
    "deep_learning": {
      "enabled": true,
      "architectures": ["MLP", "CNN", "RNN", "LSTM", "Transformer", "BERT"],
      "frameworks": ["TensorFlow", "PyTorch", "Keras"]
    },
    "selection_criteria": [
      "accuracy",
      "f1_score",
      "auc_roc",
      "rmse",
      "mape",
      "silhouette_score",
      "adjusted_rand_score",
      "davies_bouldin_index"
    ],
  "auto_select": {
    "enabled": true,
    "strategy": "performance_first",
    "justification": {
      "rules": [
        
        {
          "condition": "problem_type == 'classification' and dataset_size < 1000 and n_features < 20",
          "selected_models": ["LogisticRegression", "SVC", "KNeighborsClassifier", "DecisionTreeClassifier"],
          "justification": "Classification small data, low-dim → simple models (Logistic, SVM, KNN, Tree)."
        },
        {
          "condition": "problem_type == 'classification' and dataset_size < 1000 and n_features >= 20",
          "selected_models": ["LogisticRegression", "LinearSVC", "NaiveBayes"],
          "justification": "Classification small data, high-dim → prefer linear models with regularization or NB."
        },
        {
          "condition": "problem_type == 'classification' and dataset_size < 5000 and n_features > 100",
          "selected_models": ["LinearSVC", "LogisticRegression", "XGBClassifier"],
          "justification": "Moderate data but high-dimensional classification → linear + boosting."
        },
        {
          "condition": "problem_type == 'classification' and has_imbalanced_target == true",
          "selected_models": ["XGBClassifier", "LGBMClassifier", "CatBoostClassifier"],
          "justification": "Imbalanced classification → boosting models handle imbalance well."
        },
        {
          "condition": "problem_type == 'classification' and dataset_size >= 5000 and n_features < 100",
          "selected_models": ["RandomForestClassifier", "XGBClassifier", "LGBMClassifier", "CatBoostClassifier"],
          "justification": "Large dataset classification → tree ensembles scale well."
        },
        {
          "condition": "problem_type == 'classification' and dataset_size >= 20000 and n_features >= 100",
          "selected_models": ["RandomForestClassifier", "XGBClassifier", "LGBMClassifier", "MLPClassifier"],
          "justification": "Very large & high-dim classification → strong ensembles or neural networks."
        },

        {
          "condition": "problem_type == 'regression' and dataset_size < 2000 and n_features < 20",
          "selected_models": ["LinearRegression", "Ridge", "Lasso", "ElasticNet", "SVR"],
          "justification": "Small regression, low-dim → linear models or SVR."
        },
        {
          "condition": "problem_type == 'regression' and dataset_size < 2000 and n_features >= 20 and n_features < 200",
          "selected_models": ["Lasso", "ElasticNet", "SVR", "RandomForestRegressor"],
          "justification": "Small regression, moderate-high dim → regularized linear + tree-based."
        },
        {
          "condition": "problem_type == 'regression' and dataset_size < 2000 and n_features >= 200",
          "selected_models": ["Lasso", "ElasticNet", "SVR", "XGBRegressor"],
          "justification": "Small regression, very high-dim → regularized linear + boosting."
        },
        {
          "condition": "problem_type == 'regression' and dataset_size >= 2000 and dataset_size < 10000 and n_features <= 50",
          "selected_models": ["RandomForestRegressor", "XGBRegressor", "LGBMRegressor"],
          "justification": "Medium regression, low/medium dim → boosting or RF."
        },
        {
          "condition": "problem_type == 'regression' and dataset_size >= 2000 and dataset_size < 10000 and n_features > 50",
          "selected_models": ["XGBRegressor", "LGBMRegressor", "CatBoostRegressor"],
          "justification": "Medium regression, high-dim → boosting family preferred."
        },
        {
          "condition": "problem_type == 'regression' and dataset_size >= 10000",
          "selected_models": ["XGBRegressor", "LGBMRegressor", "CatBoostRegressor", "MLPRegressor"],
          "justification": "Large regression dataset → strong boosting or NN."
        },

        {
          "condition": "problem_type == 'clustering' and n_features < 10",
          "selected_models": ["KMeans", "MiniBatchKMeans"],
          "justification": "Clustering low-dim → KMeans and MiniBatchKMeans."
        },
        {
          "condition": "problem_type == 'clustering' and n_features >= 10 and n_features <= 100",
          "selected_models": ["GaussianMixture", "SpectralClustering"],
          "justification": "Clustering medium-dim → GMM or Spectral clustering."
        },
        {
          "condition": "problem_type == 'clustering' and n_features > 100",
          "selected_models": ["MiniBatchKMeans", "SpectralClustering", "HDBSCAN"],
          "justification": "High-dim clustering → scalable + spectral/density-based."
        },
        {
          "condition": "problem_type == 'clustering' and has_arbitrary_shapes == true",
          "selected_models": ["DBSCAN", "HDBSCAN", "OPTICS"],
          "justification": "Non-spherical clusters → density-based methods."
        },

        {
          "condition": "problem_type == 'time_series' and dataset_size < 5000 and has_seasonality == true",
          "selected_models": ["ARIMA", "SARIMA", "ExponentialSmoothing", "Prophet"],
          "justification": "Small time series with seasonality → statistical models or Prophet."
        },
        {
          "condition": "problem_type == 'time_series' and dataset_size < 5000 and has_seasonality == false",
          "selected_models": ["Prophet", "RandomForestRegressor"],
          "justification": "Small time series without strong seasonality → ML + Prophet."
        },
        {
          "condition": "problem_type == 'time_series' and dataset_size >= 5000 and dataset_size < 20000",
          "selected_models": ["XGBRegressor", "LGBMRegressor", "Prophet"],
          "justification": "Medium time series → boosting + Prophet hybrid."
        },
        {
          "condition": "problem_type == 'time_series' and dataset_size >= 20000",
          "selected_models": ["XGBRegressor", "LGBMRegressor", "LSTM", "GRU", "TCN"],
          "justification": "Large time series → boosting + deep sequence models."
        },

        {
          "condition": "problem_type == 'text' and dataset_size < 5000",
          "selected_models": ["NaiveBayes", "LogisticRegression", "LinearSVC"],
          "justification": "Small text dataset → simple linear or NB."
        },
        {
          "condition": "problem_type == 'text' and dataset_size >= 5000 and dataset_size < 50000",
          "selected_models": ["XGBClassifier", "LGBMClassifier", "LinearSVC"],
          "justification": "Medium text dataset → boosting + linear."
        },
        {
          "condition": "problem_type == 'text' and dataset_size >= 50000",
          "selected_models": ["Transformer", "BERT", "CNN_Text", "RNN_Text"],
          "justification": "Large text dataset → deep learning NLP."
        }
      ],
      "fallback": {
        "selected_models": ["RandomForest"],
        "justification": "No rule matched → fallback to RandomForest (or KMeans if clustering)."
      }
    }
  }

  },

  "model_registry": {
    "XGBRegressor": "xgboost.XGBRegressor",
    "LGBMRegressor": "lightgbm.LGBMRegressor",
    "CatBoostRegressor": "catboost.CatBoostRegressor",
    "RandomForestRegressor": "sklearn.ensemble.RandomForestRegressor",
    "LinearRegression": "sklearn.linear_model.LinearRegression",
    "SVR": "sklearn.svm.SVR",
    "KMeans": "sklearn.cluster.KMeans",
    "Prophet": "prophet.Prophet"
  },
  "model_training": {
    "train_test_split": {
      "strategy": "random",
      "test_size": 0.2,
      "stratify": true,
      "random_state": 42
    },
    "cross_validation": {
      "enabled": true,
      "method": "k_fold",
      "n_splits": 5,
      "scoring": "auto"
    },
    "hyperparameter_tuning": {
      "enabled": true,
      "phases": [
        {
          "name": "research_phase",
          "description": "Statistical-guided Bayesian Optimization using Gaussian Process (scikit-optimize) for probabilistic rigor.",
          "tool": "scikit-optimize",
          "n_iter": 30,
          "cv_folds": 3,
          "scoring": "auto",
          "acquisition_function": "EI",
          "gp_kernel": "Matern",
          "noise": "gaussian",
          "early_stopping": false,
          "goal": "explore promising regions and estimate uncertainty"
        },
        {
          "name": "production_phase",
          "description": "Optuna for scalable, pruned, GPU-friendly fine-tuning in narrowed search space.",
          "tool": "optuna",
          "n_iter": 70,
          "cv_folds": 5,
          "scoring": "auto",
          "pruner": "MedianPruner",
          "sampler": "TPESampler",
          "use_gpu": true,
          "early_stopping": true,
          "timeout_minutes": 30,
          "goal": "exploit best regions found in research phase for maximum performance"
        }
      ],
      "statistical_guided_search": {
        "enabled": true,
        "strategy": "data_driven",
        "rules": {
          "RandomForestClassifier": {
            "n_estimators": {
              "formula": "min(200, max(50, n_samples // 10))",
              "description": "Số cây: tỷ lệ thuận với số mẫu, giới hạn max 200 để tránh overfit."
            },
            "max_depth": {
              "formula": "min(15, max(3, log2(n_features) * 2))",
              "description": "Độ sâu cây: tỷ lệ với log số chiều, tránh cây quá sâu gây overfit trên dữ liệu nhỏ."
            }
          },
          "XGBClassifier": {
            "learning_rate": {
              "formula": "0.05 if n_samples > 10000 else 0.1",
              "description": "Tốc độ học: dữ liệu lớn → learning_rate nhỏ để hội tụ mịn."
            }
          }
        }
      }
    },
    "training_config": {
      "max_runtime_minutes": 60,
      "use_gpu": true,
      "verbose": true,
      "final_fit_on_full_data": true
    },

    "model_comparison": {
      "enabled": true,
      "strategy": "statistical_significance_test",
      "test": "wilcoxon_signed_rank_test",
      "alpha": 0.05,
      "selection_metric": "auto",
      "output_best_model": true,
      "generate_explanation": true,
      "explanation_template": {
        "winning_model": "Mô hình {model_name} đạt điểm {metric_name} = {score:.4f}, cao hơn đáng kể so với các mô hình khác (p-value < {alpha}).",
        "why_better": "→ {model_name} vượt trội vì: {justification}.",
        "tradeoff_note": "📌 Lưu ý trade-off: {model_name} có thể chậm hơn {faster_model} hoặc khó giải thích hơn {interpretable_model}.",
        "business_impact": "💡 Ứng dụng kinh doanh: {model_name} giúp {business_impact} — phù hợp với mục tiêu {business_goal}."
      },
      "business_goals": {
        "default": "tối ưu hóa độ chính xác dự báo",
        "interpretability": "giải thích được quyết định mô hình",
        "speed": "dự báo nhanh, real-time",
        "cost": "giảm chi phí vận hành"
      }
    }
  },
  "model_evaluation": {
    "metrics": {
      "classification": [
        "accuracy",
        "precision",
        "recall",
        "f1_score",
        "roc_auc",
        "confusion_matrix",
        "precision_recall_auc",
        "log_loss"
      ],
      "regression": [
        "mae",
        "mse",
        "rmse",
        "r2_score",
        "mape",
        "rmsle",
        "max_error"
      ],
      "time_series": ["mae", "mse", "rmse", "mape", "smape", "mase", "mae_cv"],
      "clustering": [
        "silhouette_score",
        "davies_bouldin_index",
        "calinski_harabasz_score",
        "adjusted_rand_score"
      ]
    },
    "validation_strategy": "cross_validation",
    "threshold_metrics": {
      "min_accuracy": 0.7,
      "max_rmse": "auto",
      "min_auc": 0.8,
      "min_f1": 0.65
    },
    "advanced_evaluation": {
      "bias_variance_analysis": true,
      "learning_curves": true,
      "calibration_curves": true,
      "residual_analysis": true,
      "probabilistic_uncertainty": {
        "enabled": true,
        "method": "gaussian_process_regression",
        "confidence_interval": 0.95,
        "description": "Ước lượng khoảng tin cậy cho dự đoán, dựa trên posterior distribution từ Bayesian Optimization."
      },
      "statistical_validation": {
        "enabled": true,
        "tests": ["wilcoxon", "mcnemar", "paired_t_test"],
        "goal": "Chứng minh sự khác biệt giữa mô hình có ý nghĩa thống kê."
      }
    },
    "model_comparison": {
      "enabled": true,
      "strategy": "statistical_significance_test",
      "test": "wilcoxon_signed_rank_test",
      "alpha": 0.05,
      "description": "So sánh hiệu năng giữa các mô hình/cấu hình để chọn ra mô hình tốt nhất một cách thống kê."
    }
  },
  "model_interpretation": {
    "enabled": true,
    "methods": {
      "global": [
        "feature_importance",
        "permutation_importance",
        "partial_dependence_plots",
        "ice_plots"
      ],
      "local": ["shap", "lime"],
      "surrogate_models": ["decision_tree_surrogate", "linear_model_surrogate"]
    },
    "output_format": ["plots", "tables", "interactive_dashboards"],
    "target_audience": ["technical", "business_stakeholders"]
  },
  "error_analysis": {
    "enabled": true,
    "methods": [
      "misclassification_analysis",
      "residual_plots",
      "fairness_bias_check"
    ],
    "fairness_dimensions": ["gender", "age", "region"]
  },
  "ablation_study": {
    "enabled": true,
    "strategies": [
      "feature_ablation",
      "module_ablation",
      "robustness_test_with_noise"
    ]
  },
  "model_improvement": {
    "strategies": [
      "ensemble_learning",
      "hyperparameter_fine_tuning",
      "advanced_feature_engineering",
      "collect_more_data",
      "retrain_with_updated_data",
      "model_stacking",
      "error_analysis_and_correction"
    ],
    "automated": true,
    "max_iterations": 3,
    "improvement_threshold": 0.02
  },
  "model_deployment": {
    "target_environment": ["cloud", "on_premise", "edge"],
    "platforms": [
      "AWS SageMaker",
      "GCP AI Platform",
      "Azure ML",
      "Docker",
      "Kubernetes",
      "FastAPI"
    ],
    "serialization_format": ["pickle", "joblib", "onnx", "pmml"],
    "api_spec": {
      "framework": "FastAPI",
      "input_schema": "auto_generated_from_training_data",
      "output_schema": "prediction + confidence_score"
    },
    "monitoring": {
      "enabled": true,
      "metrics": [
        "prediction_drift",
        "data_drift",
        "model_performance_decay",
        "latency",
        "throughput"
      ],
      "alerting": ["email", "slack", "pagerduty"],
      "retraining_trigger": [
        "performance_drop > 5%",
        "data_drift_detected",
        "scheduled (monthly)"
      ]
    }
  },
  "communication_documentation": {
    "auto_generate": true,
    "sections": [
      "executive_summary",
      "data_understanding",
      "preprocessing_steps",
      "feature_engineering",
      "model_selection_justification",
      "hyperparameter_tuning_results",
      "evaluation_metrics",
      "model_interpretation_insights",
      "deployment_architecture",
      "monitoring_plan",
      "limitations_and_future_work"
    ],
    "output_formats": [
      "PDF_report",
      "HTML_dashboard",
      "PowerPoint_slides",
      "Markdown"
    ],
    "audience": [
      "data_scientists",
      "engineers",
      "business_leaders",
      "stakeholders"
    ],
    "visualization": true,
    "include_code_snippets": false
  }
}
